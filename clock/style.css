/*
这个 CSS 规则集用于设置所有元素的基本样式：

1. `margin: 0;`：将所有元素的外边距设置为 0，这样可以确保页面中的元素之间没有默认的外边距，从而避免不必要的空白间隙。

2. `padding: 0;`：将所有元素的内边距设置为 0，这样可以确保页面中的元素之间没有默认的内边距，从而避免不必要的空白间隙。

3. `box-sizing: border-box;`：将所有元素的盒子模型设置为 `border-box`，这样元素的宽度和高度将包括内容、内边距和边框，而不会增加到元素的尺寸之外。

4. `font-family: sans-serif;`：设置页面中所有文本的字体系列为无衬线字体（sans-serif），这是一种通用的字体风格，适用于大多数情况。

5. `color: #ffffff;`：设置页面中所有文本的颜色为白色（#ffffff），这样可以确保页面中的文本颜色与背景色形成对比，提高可读性。

这些基本样式的设置有助于确保网页在不同浏览器和设备上显示一致，并提供了一个干净的起点，方便进一步定制网页的样式。
*/
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: sans-serif;
    color: #ffffff;
}

/*
这个 CSS 规则用于设置 `body` 元素的样式：

1. `display: flex;`：将 `body` 元素的显示方式设置为 Flex 布局，这样可以轻松地控制其子元素的布局和对齐方式。

2. `justify-content: center;`：设置 Flex 布局中主轴上的对齐方式为居中对齐，这样 `body` 元素的子元素（通常是页面内容）将在水平方向上居中显示。

3. `align-items: center;`：设置 Flex 布局中交叉轴上的对齐方式为居中对齐，这样 `body` 元素的子元素（通常是页面内容）将在垂直方向上居中显示。

4. `min-height: 100vh;`：设置 `body` 元素的最小高度为视口（viewport）的高度的 100%，这样可以确保页面内容至少占据整个视口的高度，即使内容不足时也能保持视口高度。

5. `background-color: #212121;`：设置 `body` 元素的背景颜色为 `#212121`，这是一种深灰色，用作页面的背景色。

总的来说，这些样式规则用于将页面内容在水平和垂直方向上居中显示，并确保页面至少占据整个视口的高度，并将页面背景色设置为深灰色。
*/
body{
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #212121;
}

/*
这个 CSS 规则用于设置具有 `.container` 类的元素的样式：

1. `position: relative;`：将元素的定位设置为相对定位。相对定位会使元素相对于其正常位置进行定位，但不会影响页面布局中其他元素的位置。通常与绝对定位的子元素配合使用，以便在子元素中创建绝对定位的参考点。

这个样式规则将使具有 `.container` 类的元素成为一个相对定位的容器，可以在其内部创建绝对定位的元素，并以 `.container` 元素的位置为参考进行定位。
*/
.container{
    position: relative;
}

/*
这个 CSS 规则用于设置具有 `.clock` 类的元素的样式：

1. `width: 300px;` 和 `height: 300px;`：设置 `.clock` 元素的宽度和高度为 300 像素，这样它将呈现为一个宽高相等的正圆形。

2. `border-radius: 50%;`：设置 `.clock` 元素的边框半径为 50%，这样它将呈现为一个圆形，而不是一个方形。

3. `background-color: rgba(255, 255, 255, 0.1);`：设置 `.clock` 元素的背景颜色为带有 0.1 不透明度的白色（RGBA 格式），这样可以创建一个半透明的背景效果。

4. `border: 2px solid rgba(255, 255, 255, 0.25);`：设置 `.clock` 元素的边框样式为 2 像素宽的实线边框，颜色为带有 0.25 不透明度的白色。

5. `box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.9);`：设置 `.clock` 元素的阴影效果，阴影的偏移量为水平和垂直方向都为 0 像素，模糊半径为 30 像素，颜色为带有 0.9 不透明度的黑色。

6. `display: flex;`、`justify-content: center;` 和 `align-items: center;`：将 `.clock` 元素的显示方式设置为 Flex 布局，并且将主轴和交叉轴上的对齐方式都设置为居中对齐，这样 `.clock` 元素的子元素（如果有的话）将在水平和垂直方向上都居中显示。

这些样式规则用于创建一个圆形时钟容器，其中包含了一些阴影效果和半透明的背景色，以及对内部内容的居中对齐。
*/
.clock{
    width: 300px;
    height: 300px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.25);
    box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
}

/*
这个 CSS 规则用于设置 `.clock` 内部的 `span` 元素的样式。假设这些 `span` 元素用于表示时钟的刻度或数字。

让我们逐条解释这些属性：

1. `position: absolute;`：将元素的定位设置为绝对定位，这样可以相对于其最近的已定位祖先元素进行定位。

2. `transform: rotate(calc(30deg * var(--i)));`：使用 `transform` 属性进行旋转，`rotate()` 函数可以将元素旋转指定的角度。在这里，通过 `calc()` 函数和 CSS 变量 `--i` 来动态计算旋转的角度，每个元素根据 `--i` 的值会以不同的角度进行旋转，可能是 0 度、30 度、60 度等。

3. `inset: 12px;`：`inset` 属性用于同时设置元素的上、右、下、左四个边距。这里将上、右、下、左边距都设置为 12 像素，这意味着每个 `span` 元素都会有相同的边距，使其与 `.clock` 元素保持一定的距离。

4. `text-align: center;`：设置文本居中对齐，这样在旋转后的元素内部文本会水平居中显示，例如数字或刻度。

总的来说，这些样式规则用于使时钟的刻度或数字元素相对于其父元素 `.clock` 进行绝对定位，并根据 `--i` 的值以一定的角度进行旋转，同时保持一定的边距和文本居中对齐。
*/
.clock span{
    position: absolute;
    transform: rotate(calc(30deg * var(--i))); 
    inset: 12px;
    text-align: center;
}

/*
这个 CSS 规则用于设置 `.clock` 内部的 `span` 元素中的 `b` 元素（假设这些 `b` 元素用于表示时钟的数字）的样式。

让我们逐条解释这些属性：

1. `transform: rotate(calc(-30deg * var(--i)));`：使用 `transform` 属性进行旋转，`rotate()` 函数可以将元素旋转指定的角度。在这里，通过 `calc()` 函数和 CSS 变量 `--i` 来动态计算旋转的角度，每个元素根据 `--i` 的值会以不同的角度进行逆时针旋转，可能是 0 度、-30 度、-60 度等。

2. `display: inline-block;`：将元素显示为内联块级元素，这样元素既具有块级元素的特性（可以设置宽度、高度、内外边距等），又不会独占一行，而是会按照文本流排列。

3. `font-size: 20px;`：设置文本的字体大小为 20 像素，这样时钟的数字会以一定的大小显示。

总的来说，这些样式规则用于使时钟的数字元素相对于其父元素 `.clock` 进行旋转，并设置为内联块级元素，同时设置字体大小为 20 像素。
*/
.clock span b{
    transform: rotate(calc(-30deg * var(--i)));
    display: inline-block;
    font-size: 20px;
}

/*
这个 CSS 规则用于设置 `.clock` 元素的 `::before` 伪元素的样式。假设这个伪元素用于创建时钟的中心点。

让我们逐条解释这些属性：

1. `content: '';`：设置伪元素的内容为空字符串，这样才能使伪元素产生效果。

2. `position: absolute;`：将伪元素的定位设置为绝对定位，这样可以相对于其最近的已定位祖先元素进行定位。

3. `width: 8px;` 和 `height: 8px;`：设置伪元素的宽度和高度为 8 像素，这样它将成为一个直径为 8 像素的圆。

4. `border-radius: 50%;`：设置伪元素的圆角半径为 50%，这样它将呈现为一个圆形。

5. `background-color: #fff;`：设置伪元素的背景颜色为白色，这样它将显示为一个白色的圆形。

6. `z-index: 2;`：设置伪元素的堆叠顺序为 2，这样它将位于 `.clock` 元素的上方。

总的来说，这个样式规则用于创建一个直径为 8 像素的白色圆，用作时钟的中心点，并相对于 `.clock` 元素进行绝对定位。
*/
.clock::before{
    content: '';
    position: absolute;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #fff;
    z-index: 2;
}

/*
这个 CSS 规则用于设置具有 `.hand` 类的元素的样式：

1. `position: absolute;`：将 `.hand` 元素的定位设置为绝对定位。绝对定位会使元素脱离文档流，并相对于其最近的已定位祖先元素进行定位，如果没有已定位的祖先元素，则相对于初始包含块进行定位。

2. `display: flex;`：将 `.hand` 元素的显示方式设置为 Flex 布局，这样可以轻松地控制其子元素的布局和对齐方式。

3. `justify-content: center;`：设置 Flex 布局中主轴上的对齐方式为居中对齐，这样 `.hand` 元素的子元素（如果有的话）将在水平方向上居中显示。

4. `align-items: flex-end;`：设置 Flex 布局中交叉轴上的对齐方式为底部对齐，这样 `.hand` 元素的子元素（如果有的话）将在垂直方向上底部对齐。

这些样式规则用于创建一个绝对定位的容器 `.hand`，其中的子元素将在容器的底部中心对齐，水平方向居中对齐。
*/
.hand{
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: flex-end;
}

/*
这个 CSS 规则用于设置具有 `.hand` 类的元素内部的 `i` 元素（假设这些 `i` 元素用于表示时钟的指针）的样式：

1. `position: absolute;`：将 `i` 元素的定位设置为绝对定位。绝对定位会使元素脱离文档流，并相对于其最近的已定位祖先元素进行定位，如果没有已定位的祖先元素，则相对于初始包含块进行定位。

2. `background-color: var(--clr);`：设置 `i` 元素的背景颜色为 CSS 变量 `--clr` 的值。这个 CSS 变量可以在父元素的样式中定义，以便在不同的上下文中使用不同的背景颜色。

3. `width: 4px;`：设置 `i` 元素的宽度为 4 像素。这样可以控制指针的宽度。

4. `height: var(--h);`：设置 `i` 元素的高度为 CSS 变量 `--h` 的值。这个 CSS 变量可以在父元素的样式中定义，以便在不同的上下文中使用不同的高度值。这个高度值通常用于控制指针的长度。

5. `border-radius: 8px;`：设置 `i` 元素的边框半径为 8 像素，这样它将呈现为一个圆角矩形，而不是一个方形。

这些样式规则用于定义时钟指针的样式，包括背景颜色、宽度、高度和边框半径。通过使用 CSS 变量，可以在不同的上下文中灵活地控制指针的外观。
*/
.hand i{
    position: absolute;
    background-color: var(--clr);
    width: 4px;
    height: var(--h);
    border-radius: 8px;
}
